// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// Ref: #/components/schemas/AddFileRequest
type AddFileRequest struct {
	// URL файла для добавления.
	URL url.URL `json:"url"`
}

// GetURL returns the value of URL.
func (s *AddFileRequest) GetURL() url.URL {
	return s.URL
}

// SetURL sets the value of URL.
func (s *AddFileRequest) SetURL(val url.URL) {
	s.URL = val
}

type AddFileToTaskBadRequest Error

func (*AddFileToTaskBadRequest) addFileToTaskRes() {}

type AddFileToTaskConflict Error

func (*AddFileToTaskConflict) addFileToTaskRes() {}

type AddFileToTaskNotFound Error

func (*AddFileToTaskNotFound) addFileToTaskRes() {}

// Ref: #/components/schemas/Error
type Error struct {
	// Код ошибки.
	Code string `json:"code"`
	// Сообщение об ошибке.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() string {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val string) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

func (*Error) createTaskRes()    {}
func (*Error) getTaskStatusRes() {}

// Ref: #/components/schemas/FileInfo
type FileInfo struct {
	// URL файла.
	URL url.URL `json:"url"`
	// Имя файла.
	Filename string `json:"filename"`
	// Статус загрузки файла.
	Status FileInfoStatus `json:"status"`
	// Описание ошибки (если есть).
	Error OptNilString `json:"error"`
}

// GetURL returns the value of URL.
func (s *FileInfo) GetURL() url.URL {
	return s.URL
}

// GetFilename returns the value of Filename.
func (s *FileInfo) GetFilename() string {
	return s.Filename
}

// GetStatus returns the value of Status.
func (s *FileInfo) GetStatus() FileInfoStatus {
	return s.Status
}

// GetError returns the value of Error.
func (s *FileInfo) GetError() OptNilString {
	return s.Error
}

// SetURL sets the value of URL.
func (s *FileInfo) SetURL(val url.URL) {
	s.URL = val
}

// SetFilename sets the value of Filename.
func (s *FileInfo) SetFilename(val string) {
	s.Filename = val
}

// SetStatus sets the value of Status.
func (s *FileInfo) SetStatus(val FileInfoStatus) {
	s.Status = val
}

// SetError sets the value of Error.
func (s *FileInfo) SetError(val OptNilString) {
	s.Error = val
}

// Статус загрузки файла.
type FileInfoStatus string

const (
	FileInfoStatusPending    FileInfoStatus = "pending"
	FileInfoStatusDownloaded FileInfoStatus = "downloaded"
	FileInfoStatusFailed     FileInfoStatus = "failed"
)

// AllValues returns all FileInfoStatus values.
func (FileInfoStatus) AllValues() []FileInfoStatus {
	return []FileInfoStatus{
		FileInfoStatusPending,
		FileInfoStatusDownloaded,
		FileInfoStatusFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FileInfoStatus) MarshalText() ([]byte, error) {
	switch s {
	case FileInfoStatusPending:
		return []byte(s), nil
	case FileInfoStatusDownloaded:
		return []byte(s), nil
	case FileInfoStatusFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FileInfoStatus) UnmarshalText(data []byte) error {
	switch FileInfoStatus(data) {
	case FileInfoStatusPending:
		*s = FileInfoStatusPending
		return nil
	case FileInfoStatusDownloaded:
		*s = FileInfoStatusDownloaded
		return nil
	case FileInfoStatusFailed:
		*s = FileInfoStatusFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Task
type Task struct {
	// Уникальный идентификатор задачи.
	ID uuid.UUID `json:"id"`
	// Статус задачи.
	Status TaskStatus `json:"status"`
	// Список файлов в задаче.
	Files []FileInfo `json:"files"`
	// Ссылка на архив (доступна только когда задача
	// завершена).
	ArchiveUrl OptNilString `json:"archiveUrl"`
	// Время создания задачи.
	CreatedAt time.Time `json:"createdAt"`
	// Время последнего обновления задачи.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *Task) GetID() uuid.UUID {
	return s.ID
}

// GetStatus returns the value of Status.
func (s *Task) GetStatus() TaskStatus {
	return s.Status
}

// GetFiles returns the value of Files.
func (s *Task) GetFiles() []FileInfo {
	return s.Files
}

// GetArchiveUrl returns the value of ArchiveUrl.
func (s *Task) GetArchiveUrl() OptNilString {
	return s.ArchiveUrl
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Task) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Task) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Task) SetID(val uuid.UUID) {
	s.ID = val
}

// SetStatus sets the value of Status.
func (s *Task) SetStatus(val TaskStatus) {
	s.Status = val
}

// SetFiles sets the value of Files.
func (s *Task) SetFiles(val []FileInfo) {
	s.Files = val
}

// SetArchiveUrl sets the value of ArchiveUrl.
func (s *Task) SetArchiveUrl(val OptNilString) {
	s.ArchiveUrl = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Task) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Task) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*Task) addFileToTaskRes() {}
func (*Task) createTaskRes()    {}
func (*Task) getTaskStatusRes() {}

// Статус задачи.
type TaskStatus string

const (
	TaskStatusPending    TaskStatus = "pending"
	TaskStatusProcessing TaskStatus = "processing"
	TaskStatusCompleted  TaskStatus = "completed"
	TaskStatusFailed     TaskStatus = "failed"
)

// AllValues returns all TaskStatus values.
func (TaskStatus) AllValues() []TaskStatus {
	return []TaskStatus{
		TaskStatusPending,
		TaskStatusProcessing,
		TaskStatusCompleted,
		TaskStatusFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TaskStatus) MarshalText() ([]byte, error) {
	switch s {
	case TaskStatusPending:
		return []byte(s), nil
	case TaskStatusProcessing:
		return []byte(s), nil
	case TaskStatusCompleted:
		return []byte(s), nil
	case TaskStatusFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TaskStatus) UnmarshalText(data []byte) error {
	switch TaskStatus(data) {
	case TaskStatusPending:
		*s = TaskStatusPending
		return nil
	case TaskStatusProcessing:
		*s = TaskStatusProcessing
		return nil
	case TaskStatusCompleted:
		*s = TaskStatusCompleted
		return nil
	case TaskStatusFailed:
		*s = TaskStatusFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
